def __init__(self, robot):
    ns = 'robot/limb/' + robot + '/'
    self._client = actionlib.SimpleActionClient(
        ns + "follow_joint_trajectory",
        FollowJointTrajectoryAction,
    )
    self._goal = FollowJointTrajectoryGoal()
    self._goal_time_tolerance = rospy.Time(0.1)
    self._goal.goal_time_tolerance = self._goal_time_tolerance
    server_up = self._client.wait_for_server(timeout=rospy.Duration(10.0))
    if not server_up:
        rospy.logerr("Timed out waiting for Joint Trajectory"
                     " Action Server to connect. Start the action server"
                     " before running example.")
        rospy.signal_shutdown("Timed out waiting for Action Server")
        sys.exit(1)

    self.clear(robot)

def start(self):
    self.goal.trajectory.header.stamp = rospy.Time.now()
    self.client.send_goal(self.goal)



def create_transform_msg(parent_frame_name, frame_name, pose, orientation):
    static_transform_stamped = geometry_msgs.msg.TransformStamped()
    static_transform_stamped.header.stamp = rospy.Time.now()
    static_transform_stamped.header.frame_id = parent_frame_name

    static_transform_stamped.child_frame_id = frame_name

    static_transform_stamped.transform.translation.x = pose[0]
    static_transform_stamped.transform.translation.y = pose[1]
    static_transform_stamped.transform.translation.z = pose[2]

    norm_orient = linalg.norm(orientation)
    static_transform_stamped.transform.rotation.x = float(orientation[0] / norm_orient)
    static_transform_stamped.transform.rotation.y = float(orientation[1] / norm_orient)
    static_transform_stamped.transform.rotation.z = float(orientation[2] / norm_orient)
    static_transform_stamped.transform.rotation.w = float(orientation[3] / norm_orient)

    return static_transform_stamped

def publish_transform_msg(param_name=''):
    if rospy.has_param(param_name):
        frames_list = rospy.get_param(param_name)
    else:
        pass

    broadcaster = tf2_ros.StaticTransformBroadcaster()
    brd_list = []

    for name, data in frames_list.items():
        msg = create_transform_msg(parent_frame_name=data['goal_frame']['frame_id'],
                                   frame_name=name + '_goal_frame',
                                   pose=data['goal_frame']['position'],
                                   orientation=data['goal_frame']['orientation'])
        brd_list.append(msg)

        if 'start_frame' in data:
            msg = create_transform_msg(parent_frame_name=data['start_frame']['frame_id'],
                                       frame_name=name + '_start_frame',
                                       pose=data['start_frame']['position'],
                                       orientation=data['start_frame']['orientation'])
        brd_list.append(msg)


    broadcaster.sendTransform(brd_list)
